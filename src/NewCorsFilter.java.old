import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.Restlet;
import org.restlet.data.Header;
import org.restlet.data.Method;
//import org.restlet.data.Reference;
import org.restlet.util.Series;
import org.restlet.routing.Filter;
import org.restlet.engine.header.HeaderConstants;

public class NewCorsFilter extends Filter {

    public NewCorsFilter(Context context, Restlet next) {
        super(context, next);
    }

    @SuppressWarnings("unchecked")
    @Override
    protected int beforeHandle(Request request, Response response) {
        // Initialize response headers
        Series<Header> responseHeaders = (Series<Header>) response.getAttributes().get(HeaderConstants.ATTRIBUTE_HEADERS);
        if (responseHeaders == null) {
            responseHeaders = new Series<>(Header.class);
        }

        // Request headers
        Series<Header> requestHeaders = (Series<Header>) request.getAttributes().get(HeaderConstants.ATTRIBUTE_HEADERS);
        String requestOrigin = requestHeaders.getFirstValue("Origin", false, "*");
        String requestHeadersValue = requestHeaders.getFirstValue("Access-Control-Request-Headers", false, "*");

        // Set CORS headers in response
        responseHeaders.set("Access-Control-Expose-Headers", "Authorization, Link");
        responseHeaders.set("Access-Control-Allow-Credentials", "true");
        responseHeaders.set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
        responseHeaders.set("Access-Control-Allow-Origin", requestOrigin);
        responseHeaders.set("Access-Control-Allow-Headers", requestHeadersValue);

        // Set response headers
        response.getAttributes().put(HeaderConstants.ATTRIBUTE_HEADERS, responseHeaders);

        // Handle HTTP methods
        if (Method.OPTIONS.equals(request.getMethod())) {
            return STOP;
        }

        return super.beforeHandle(request, response);
    }
}
